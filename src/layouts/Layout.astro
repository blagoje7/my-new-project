---
interface Props {
    title?: string;
    lang?: 'sr' | 'en' | 'nl';
}

const { title = "Dr Tamara Medovarski - Psychotherapist", lang = 'sr' } = Astro.props;
import '../styles/global.css';
import '../styles/mobile.css';
import '../styles/desktop.css';
import '../styles/layout.css';
import LanguageSwitcher from '../components/LanguageSwitcher.astro';
import Footer from '../components/Footer.astro';
import { useTranslations } from '../i18n/utils';

const t = useTranslations(lang);
---

<!doctype html>
<html lang={lang}>
    <head>
        <meta charset="UTF-8" />
        <meta name="description" content="Dr Tamara Medovarski - Online Psychotherapy" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
        
        <!-- Favicons -->
        <link rel="icon" href="/assets/logo11111.png" />
        <link rel="shortcut icon" href="/assets/logo11111.png" />
        <link rel="icon" type="image/png" href="/assets/logo11111.png" />
        <!-- Force favicon refresh -->
        <link rel="icon" type="image/png" href="/assets/logo11111.png?v=2" />
        
        <!-- Open Graph / Social Media -->
        <meta property="og:type" content="website" />
        <meta property="og:title" content={title} />
        <meta property="og:description" content="Dr Tamara Medovarski - Online Psychotherapy" />
        <meta property="og:image" content="/assets/logo11111.png" />
        <meta property="og:url" content={Astro.url} />
        
        <!-- Twitter -->
        <meta name="twitter:card" content="summary_large_image" />
        <meta name="twitter:title" content={title} />
        <meta name="twitter:description" content="Dr Tamara Medovarski - Online Psychotherapy" />
        <meta name="twitter:image" content="/assets/logo11111.png" />
        
        <meta name="generator" content={Astro.generator} />
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
        <title>{title}</title>
    </head>
    <body>
        <header>
            <nav>
                <button class="hamburger" aria-label="Menu">
                    <span></span>
                    <span></span>
                    <span></span>
                </button>
                <div class="nav-items">
                    <a href={`/${lang}`}>{t('nav.home')}</a>
                    <a href={`/${lang}/about`}>{t('nav.about')}</a>
                    <a href={`/${lang}/contact`}>{t('nav.contact')}</a>
                </div>
                <LanguageSwitcher />
            </nav>
        </header>
        <main>
            <slot />
        </main>
        <Footer lang={lang} />
    </body>
</html>

<script>
    function toggleMenu(isOpen: boolean) {
        const hamburger = document.querySelector('.hamburger');
        const navItems = document.querySelector('.nav-items');
        
        if (isOpen) {
            hamburger?.classList.add('active');
            navItems?.classList.add('show');
            document.body.classList.add('menu-open');
        } else {
            hamburger?.classList.remove('active');
            navItems?.classList.remove('show');
            document.body.classList.remove('menu-open');
        }
    }

    function initializeMenu() {
        const hamburger = document.querySelector('.hamburger');
        const navItems = document.querySelector('.nav-items');

        // Toggle menu on hamburger click
        hamburger?.addEventListener('click', (e) => {
            e.stopPropagation();
            const isCurrentlyOpen = navItems?.classList.contains('show');
            toggleMenu(!isCurrentlyOpen);
        });

        // Close menu when clicking outside
        document.addEventListener('click', (e) => {
            const target = e.target as Node;
            if (!hamburger?.contains(target) && 
                !navItems?.contains(target) && 
                navItems?.classList.contains('show')) {
                toggleMenu(false);
            }
        });

        // Close menu when clicking a nav link
        navItems?.querySelectorAll('a').forEach(link => {
            link.addEventListener('click', () => {
                toggleMenu(false);
            });
        });

        // Handle escape key
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape' && navItems?.classList.contains('show')) {
                toggleMenu(false);
            }
        });
    }

    // Initialize on load
    document.addEventListener('DOMContentLoaded', initializeMenu);

    // Handle window resize
    let resizeTimer: ReturnType<typeof setTimeout>;
    window.addEventListener('resize', () => {
        clearTimeout(resizeTimer);
        resizeTimer = setTimeout(() => {
            // Close menu if open during resize
            if (document.querySelector('.nav-items')?.classList.contains('show')) {
                toggleMenu(false);
            }
        }, 250);
    });
</script>
